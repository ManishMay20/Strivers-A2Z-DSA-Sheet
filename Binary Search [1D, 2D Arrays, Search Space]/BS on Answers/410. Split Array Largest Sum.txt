410. Split Array Largest Sum

Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= k <= min(50, nums.length)

Solutions

class Solution {
public:
    int splitArray(vector<int>& arr, int m) {
        int n = arr.size();
        if(n < m) return -1;
    int low = arr[0];
    int high = 0;

    for(int i=0; i<n; i++){
        if(low < arr[i]) low = arr[i];
        high += arr[i];
    }
    while(low<=high){
        int mid = (low+high)/2;
        int sum = 0;
        int cnt  = 1;
        for(int i=0; i<n; i++){
            sum+=arr[i];
            if(sum > mid){
                cnt++;
                sum = arr[i];
            }
        }
        if(cnt > m){
            low = mid+1;
        }
        else{
            high = mid-1;
        }
    }
    return low;
    }
};