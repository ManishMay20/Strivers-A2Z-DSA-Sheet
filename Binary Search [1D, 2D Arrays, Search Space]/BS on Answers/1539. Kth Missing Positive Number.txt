1539. Kth Missing Positive Number
Solved
Easy
Topics
Companies
Hint
Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.

Return the kth positive integer that is missing from this array.

 

Example 1:

Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.
Example 2:

Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.
 

Constraints:

1 <= arr.length <= 1000
1 <= arr[i] <= 1000
1 <= k <= 1000
arr[i] < arr[j] for 1 <= i < j <= arr.length
 

Follow up:

Could you solve this problem in less than O(n) complexity?

Solution 

Brute Force O(N)

solution1

class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        int n= arr.size();
        for(int i=0; i<n; i++){
            if(k>=arr[i]){
                k++;
            }
            else break;
        }
        return k;
    }
};

brute force solution 2

class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        int n = arr.size();
        int i = 0;
        int cnt = 0;
        int check = 1;
        while(i<n ){
            if(check != arr[i]){
                cnt = cnt +1;
                if(cnt == k){
                    return check;
                }
                check++;
            }
            else{
                i++;
                check++;
            }
        }
        int temp = k-cnt;
        return arr[n-1] + temp;
    }
};

Optimal 

class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        int n = arr.size();
        int low = 0;
        int high = n-1;

        while(low<=high){
            int mid = (low+high)/2;
            int missingNumber = arr[mid]-(mid+1);
            if(missingNumber >= k){
                high = mid-1;
            }
            else low = mid+1;
        }
// return arr[high] + (k-missingNumber);
        return low+k;
    }
};